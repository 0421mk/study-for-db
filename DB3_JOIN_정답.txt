# 기존에 mydb 데이터베이스가 존재 한다면 삭제
DROP DATABASE IF EXISTS `mydb`;

# 새 데이터베이스(`mydb`) 생성
CREATE DATABASE `mydb`;

# 새 데이터베이스(`mydb`) 선택
USE `mydb`;

# 부서(dept) 테이블 생성
# id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
# PRIMARY KEY(id),
# regDate DATETIME NOT NULL,
# `name` CHAR(30) NOT NULL UNIQUE
CREATE TABLE dept (
    id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    PRIMARY KEY(id),
    regDate DATETIME NOT NULL,
    `name` CHAR(30) NOT NULL UNIQUE
);

#dept 테이블 구조 확인
DESC dept;

# dept 테이블에 '홍보', '기획' 부서 추가
INSERT INTO dept
SET regDate = NOW(),
`name` = '홍보';

INSERT INTO dept
SET regDate = NOW(),
`name` = '기획';

# dept 테이블 조회
SELECT * FROM dept;

# 사원(emp) 테이블 생성
# id int(10) unsigned not null auto_increment,
# primary key(id),
# regDate datetime not null,
# `name` char(100) not null,
# deptId int(10) unsigned not null
CREATE TABLE emp (
    id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
    PRIMARY KEY(id),
    regDate DATETIME NOT NULL,
    `name` CHAR(30) NOT NULL,
    deptId INT(10) UNSIGNED NOT NULL
);

# emp 테이블 구조 확인
DESC emp;

# 사원 테이블에 홍길동(deptId = 1), 홍길순(deptId = 1), 임꺽정(deptId = 2) 추가
INSERT INTO emp
SET regDate = NOW(),
`name` = '홍길동',
deptId = 1;

INSERT INTO emp
SET regDate = NOW(),
`name` = '홍길순',
deptId = 1;

INSERT INTO emp
SET regDate = NOW(),
`name` = '임꺽정',
deptId = 2;

SELECT * FROM emp;

# 사장님께 드릴 인명록을 생성
# inner join 사용, id 값을 기준으로 join
SELECT *
FROM emp
INNER JOIN dept
ON emp.deptId = dept.id;

# 사장님께 드릴 인명록을 생성(v4, 사장님께서 보시기에 편한 칼럼명(AS))
SELECT e.id AS 사원번호,
e.regDate AS 입사일,
e.name AS 사원명,
d.name AS 부서명
FROM emp AS e
INNER JOIN dept AS d
ON e.deptId = d.id;

# 사원 테이블에서 연봉 칼럼 추가
# salary int(10) unsigned not null, name 뒤에 추가
ALTER TABLE emp ADD COLUMN salary INT(10) UNSIGNED NOT NULL AFTER `name`;

SELECT * FROM emp;

# 각각 사원별로 연봉 책정하여 업데이트
# 홍길동 => 5000, 홍길순 => 6000, 임꺽정 => 4000
UPDATE emp
SET salary = 5000
WHERE `name` = '홍길동';

UPDATE emp
SET salary = 6000
WHERE `name` = '홍길순';

UPDATE emp
SET salary = 4000
WHERE `name` = '임꺽정';

SELECT * FROM emp;

# 사원 수 출력
SELECT COUNT(*) FROM emp;

# 가장 큰 사원 번호와 이름 출력
SELECT MAX(id), `name` FROM emp;

# 가장 고액 연봉자의 연봉과 이름 출력
SELECT MAX(salary), `name` FROM emp;

# 가장 저액 연봉자의 연봉과 이름 출력
SELECT MIN(salary), `name` FROM emp;

# 회사의 1년 인건비 지출 내역
SELECT SUM(salary)
FROM emp;

# 회사의 인건비 지출 평균
SELECT AVG(salary)
FROM emp;

# 부서별 1년 인건비 지출 내역
SELECT SUM(salary)
FROM emp
GROUP BY deptId;

# 부서별 최저 연봉
# 부서 id값과 최고 연봉 조회
SELECT deptId, MAX(salary)
FROM emp
GROUP BY deptId;

# 부서별 최저 연봉
# 부서 id값과 최저 연봉 조회
SELECT deptId, MIN(salary)
FROM emp
GROUP BY deptId;

# 부서별 최저 연봉
# 부서 id값과 평균 연봉 조회
SELECT deptId, AVG(salary)
FROM emp
GROUP BY deptId;

# 부서별 1년 인건비 지출 내역
# '부서명'과 '년간 인건비 지출 내역' 조회
# 힌트 : INNER JOIN, AS
SELECT SUM(e.salary) AS '년간 인건비 지출 내역', d.name AS '부서명'
FROM emp AS e
INNER JOIN dept AS d
ON e.deptId = d.id
GROUP BY e.deptId;

# 부서별 부서번호, 사원리스트, 평균연봉, 최고연봉, 최저연봉, 사원수
# 사원리스트 : 사원 나열 (group_concat 함수 사용)
# 평균연봉 : 소수점 없애기 (truncate 함수 사용)
# 조인 안한 버전
SELECT
deptId AS 부서번호,
GROUP_CONCAT(`name`) AS 사원리스트,
TRUNCATE(AVG(salary), 0) AS 평균연봉,
MAX(salary) AS 최고연봉,
MIN(salary) AS 최저연봉,
COUNT(*) AS 사원수
FROM emp
GROUP BY deptId;

# 위 SQL 문에서 부서번호를 부서명으로 출력
# 조인 이용
SELECT
d.name AS 부서명,
GROUP_CONCAT(e.name) AS 사원리스트,
TRUNCATE(AVG(e.salary), 0) AS 평균연봉,
MAX(e.salary) AS 최고연봉,
MIN(e.salary) AS 최저연봉,
COUNT(*) AS 사원수
FROM emp AS e
INNER JOIN dept AS d
ON e.deptId = d.id
GROUP BY e.deptId;

# 위 SQL 문에서 평균연봉 5000만원 이상 출력
SELECT
d.name AS 부서명,
GROUP_CONCAT(e.name) AS 사원리스트,
TRUNCATE(AVG(e.salary), 0) AS 평균연봉,
MAX(e.salary) AS 최고연봉,
MIN(e.salary) AS 최저연봉,
COUNT(*) AS 사원수
FROM emp AS e
INNER JOIN dept AS d
ON e.deptId = d.id
GROUP BY e.deptId
HAVING 평균연봉 >= 5000;

# 위 SQL 문에서 평균연봉 5000만원 이상 출력
# 단, Having 사용 불가
SELECT *
FROM (
SELECT
d.name AS 부서명,
GROUP_CONCAT(e.name) AS 사원리스트,
TRUNCATE(AVG(e.salary), 0) AS 평균연봉,
MAX(e.salary) AS 최고연봉,
MIN(e.salary) AS 최저연봉,
COUNT(*) AS 사원수
FROM emp AS e
INNER JOIN dept AS d
ON e.deptId = d.id
GROUP BY e.deptId
) AS a
WHERE a.평균연봉 >= 5000;